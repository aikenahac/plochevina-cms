# ---- Base Builder Image ----
FROM node:22-alpine AS base

# Enable pnpm through Corepack
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set work directory
WORKDIR /opt/app

# Copy only dependency files for caching
COPY package.json pnpm-lock.yaml ./

# Install build dependencies
RUN apk add --no-cache \
  build-base \
  gcc \
  autoconf \
  automake \
  zlib-dev \
  libpng-dev \
  vips-dev \
  python3 \
  make \
  cmake \
  git

# ---- Dependencies Stage (cache layer) ----
FROM base AS deps

# Install full dependencies (with dev deps for build)
RUN pnpm install --frozen-lockfile


# ---- Build Stage ----
FROM base AS build
COPY --from=deps /opt/app/node_modules ./node_modules
COPY . .
RUN pnpm run build


# ---- Production Stage ----
FROM node:22-alpine AS prod

# Install runtime dependencies only
RUN apk add --no-cache vips-dev

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/app

# Copy files needed for production
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod --frozen-lockfile

# Copy built assets
COPY --from=build /opt/app/dist ./dist

# Ensure correct ownership
RUN chown -R node:node /opt/app
USER node

# Expose app port
EXPOSE 1337

# Healthcheck (optional but recommended)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:1337/_health || exit 1

CMD ["pnpm", "start"]

